{"version":3,"sources":["components/card.js","components/game.js","App.js","index.js"],"names":["Card","card","props","className","state","onClick","flipCard","id","count","Object","prototype","hasOwnProperty","call","src","folder","img","alt","txt","helpTxt","Game","cards","name","length","map","index","App","useState","pair","updatePair","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","gameData","updateCards","refreshCardState","currentCards","tuple","forEach","item","rows","currentPair","currentCard","find","tempPair","first","second","matchid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAkBeA,EAfF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAASC,EAAY,wBACnC,OACE,qBAAKC,UAAS,eAAUF,EAAKG,OAASC,QAAS,kBAAMH,EAAMI,SAASL,EAAKM,KAAzE,SACE,sBAAKJ,UAAU,QAAf,UACE,qBAAKA,UAAU,QAAf,SAAuB,sBAAMA,UAAU,QAAhB,SAA0BD,EAAMM,MAAQ,MAC/D,qBAAKL,UAAU,OAAf,SACGM,OAAOC,UAAUC,eAAeC,KAAKX,EAAM,OACxC,qBAAKY,IAAG,gBAAWX,EAAMY,OAAjB,YAA2Bb,EAAKc,KAAOZ,UAAU,WAAWa,IAAKf,EAAKc,MAC9E,sBAAKZ,UAAU,WAAf,UAA0B,6BAAKF,EAAKgB,MAAS,4BAAIhB,EAAKiB,qBCerDC,EAtBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUlB,EAAY,yBACpC,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKD,EAAMmB,OACX,qBAAKlB,UAAU,iBAAf,SAEoB,IAAjBiB,EAAME,OACF,qBAAKnB,UAAU,QAAf,yBACAiB,EACEG,KAAI,SAACtB,EAAMuB,GAAP,OAAkB,cAAC,EAAD,aAAoBhB,MAAOgB,EAAOvB,KAAMA,GAAUC,GAAvCD,EAAKM,a,OCmEtCkB,MA9Df,WAAiB,IAAD,EACaC,mBAAS,IADtB,mBACPC,EADO,KACDC,EADC,OAEeF,mBAd/B,SAAkBG,GAEhB,IADA,IAAqCC,EAAoBC,EAArDC,EAAeH,EAAMP,OACD,IAAjBU,GACLD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,EAK+BO,CAAQC,EAASjB,QAFzC,mBAEPA,EAFO,KAEAkB,EAFA,KAId,SAASC,EAAkBC,EAAcC,EAAOrC,GAC9C,OAAO,YAAIoC,EAAajB,KAAI,SAAAtB,GAM1B,OALAwC,EAAMC,SAAQ,SAAAC,GACRA,EAAKpC,KAAON,EAAKM,KACnBN,EAAKG,MAAQA,MAGVH,MA4CX,OACE,qBAAKE,UAAU,MAAf,SACE,cAAC,EAAD,CAAMkB,KAAMgB,EAAShB,KAAMP,OAAQuB,EAASvB,OAAQ8B,KAAMP,EAASO,KAAMxB,MAAOA,EAAOd,SA1C1E,SAACC,GAChB,IAAIsC,EAAclB,EACda,EAAepB,EACb0B,EAAcN,EAAaO,MAAK,SAAA9C,GAAI,OAAIA,EAAKM,KAAOA,KAE1D,GAA0B,WAAtBuC,EAAY1C,MAAhB,CAlCc,IAsCVyC,EAAYvB,SACdkB,EAAeD,EAAiBC,EAAcb,EAAM,UACpDkB,EAAc,IAGhB,IAAMG,EAAQ,sBAAOH,GAAP,CAAoBC,IAClC,GAAID,EAAYvB,OA5CF,IA6Cc,WAAtBwB,EAAY1C,QACdoC,EAAeD,EAAiBC,EAAcQ,EAAf,cA9CrB,IA8CqDA,EAAS1B,OAAuB,OAAS,KACxGuB,EAAcG,GA/CJ,IAkDRA,EAAS1B,QAAsB,CAAC,IAAD,cACT0B,EADS,GAC1BC,EAD0B,KACnBC,EADmB,KAE7BD,EAAME,UAAYD,EAAOC,UAC3BX,EAAeD,EAAiBC,EAAcQ,EAAU,WACxDH,EAAc,IAWpBjB,EAAWiB,GACXP,EAAYE,UCjEhBY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.795f99d9.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Card = ({ card, ...props }) => {\n  return (\n    <div className={`card ${card.state}`} onClick={() => props.flipCard(card.id)}>\n      <div className='inner'>\n        <div className='front'><span className='count'>{(props.count + 1)}</span></div>\n        <div className='back'>\n          {Object.prototype.hasOwnProperty.call(card, 'img')\n            ? <img src={`./img/${props.folder}/${card.img}`} className='card-img' alt={card.img} />\n            : <div className='card-txt'><h2>{card.txt}</h2><p>{card.helpTxt}</p></div>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n\nCard.propTypes = {\n  card: PropTypes.object.isRequired\n}\n","import React from 'react'\nimport Card from './card'\nimport PropTypes from 'prop-types'\n\nconst Game = ({ cards, ...props }) => {\n  return (\n    <div className='game'>\n      <h1>{props.name}</h1>\n      <div className='game-container'>\n        {\n        (cards.length === 0)\n          ? (<div className='empty'>No cards...</div>)\n          : (cards\n              .map((card, index) => (<Card key={card.id} count={index} card={card} {...props} />)\n              )\n            )\n      }\n      </div>\n    </div>\n  )\n}\n\nGame.propTypes = {\n  cards: PropTypes.array.isRequired\n}\n\nexport default Game\n","import React, { useState } from 'react'\nimport Game from './components/game'\nimport gameData from './models/dt.json'\n\nconst MAX_MATCH = 2\n\nfunction shuffle (array) {\n  let currentIndex = array.length; let temporaryValue; let randomIndex\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n  return array\n}\n\nfunction App () {\n  const [pair, updatePair] = useState([])\n  const [cards, updateCards] = useState(shuffle(gameData.cards))\n\n  function refreshCardState (currentCards, tuple, state) {\n    return [...currentCards.map(card => {\n      tuple.forEach(item => {\n        if (item.id === card.id) {\n          card.state = state\n        }\n      })\n      return card\n    })]\n  }\n\n  const flipCard = (id) => {\n    let currentPair = pair\n    let currentCards = cards\n    const currentCard = currentCards.find(card => card.id === id)\n\n    if (currentCard.state !== 'hidden') {\n      return\n    }\n\n    if (currentPair.length === MAX_MATCH) {\n      currentCards = refreshCardState(currentCards, pair, 'hidden')\n      currentPair = []\n    }\n\n    const tempPair = [...currentPair, currentCard]\n    if (currentPair.length < MAX_MATCH) {\n      if (currentCard.state === 'hidden') {\n        currentCards = refreshCardState(currentCards, tempPair, `show${tempPair.length === MAX_MATCH ? ' max' : ''}`)\n        currentPair = tempPair\n      }\n\n      if (tempPair.length === MAX_MATCH) {\n        const [first, second] = tempPair\n        if (first.matchid === second.matchid) {\n          currentCards = refreshCardState(currentCards, tempPair, 'matched')\n          currentPair = []\n        }\n        // else{\n        //   const timer = setTimeout(() => {\n        //   currentCards = refreshCardState(currentCards,pair,\"hidden\");\n        //     updatePair([]);\n        //   }, gameData.flipSpeed);\n        //   return () => clearTimeout(timer);\n        // }\n      }\n    }\n    updatePair(currentPair)\n    updateCards(currentCards)\n  }\n\n  return (\n    <div className='App'>\n      <Game name={gameData.name} folder={gameData.folder} rows={gameData.rows} cards={cards} flipCard={flipCard} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}